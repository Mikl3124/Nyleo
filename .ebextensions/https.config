Resources:
    sslSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: { 'Fn::GetAtt': ['AWSEBSecurityGroup', 'GroupId'] }
            IpProtocol: tcp
            ToPort: 443
            FromPort: 443
            CidrIp: 0.0.0.0/0

files:
    # The Nginx config forces https, and is meant as an example only.
    /etc/nginx/conf.d/000_http_redirect_custom.conf:
        mode: '000644'
        owner: root
        group: root
        content: |
            server {
              listen 8080;
              return 301 https://$host$request_uri;
            }

    # The Nginx config forces https, and is meant as an example only.
    /etc/nginx/conf.d/https_custom.pre:
        mode: '000644'
        owner: root
        group: root
        content: |
            # HTTPS server
            server {
              listen       443 default ssl;
              server_name  localhost;
              error_page  497 https://$host$request_uri;

              ssl_certificate      /etc/letsencrypt/live/ebcert/${CERT_DOMAIN}/fullchain.pem;
              ssl_certificate_key  /etc/letsencrypt/live/ebcert/${CERT_DOMAIN}/privkey.pem;

              ssl_session_timeout  5m;
              ssl_protocols  TLSv1.1 TLSv1.2;
              ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
              ssl_prefer_server_ciphers   on;

              if ($ssl_protocol = "") {
                rewrite ^ https://$host$request_uri? permanent;
              }

              location / {
                  proxy_pass  http://docker;
                  proxy_set_header   Connection "";
                  proxy_http_version 1.1;
                  proxy_set_header        Host            $host;
                  proxy_set_header        X-Real-IP       $remote_addr;
                  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header        Upgrade         $http_upgrade;
                  proxy_set_header        Connection      "upgrade";
              }
            }

container_commands:
    20_installepel:
        command: |
            sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            if [ $? -ne 1 ]; then   # Exit on any any error except 'nothing to do' 
                exit 0
            fi
    30_enableepel:
        command: 'sudo yum-config-manager --enable epel'
    40_installcertbot:
        command: |
            sudo yum install -y certbot
            if [ $? -ne 1 ]; then   # Exit on any any error except 'nothing to do' 
                exit 0
            fi
    50_stopNginx:
        command: 'sudo systemctl stop nginx'
    50_getcert:
        command: 'sudo certbot certonly --debug --non-interactive --email ${CERT_EMAIL} --agree-tos --standalone --domains ${CERT_DOMAIN} --keep-until-expiring'

files:
  /etc/httpd/conf.d/vhosts.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      <VirtualHost *:80>
        RewriteEngine On
        DocumentRoot /var/www/html/public
        RewriteCond %{HTTPS} off [OR] 
        RewriteCond %{HTTP:X-Forwarded-Proto} !https
        RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [NC,R=301,L]
      </VirtualHost>

  /etc/httpd/conf.d/ssl.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      LoadModule ssl_module modules/mod_ssl.so
      Listen 443
      <VirtualHost *:443>
        SSLEngine             on
        SSLCertificateFile    "/etc/letsencrypt/live/${CERT_DOMAIN}/fullchain.pem"
        SSLCertificateKeyFile "/etc/letsencrypt/live/${CERT_DOMAIN}/privkey.pem"
        SSLCipherSuite        ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384
        SSLProtocol           -all +TLSv1.2
        SSLHonorCipherOrder   Off
        SSLSessionTickets     Off

        # Enable HTTP/2, if available
        Protocols h2 http/1.1
        ProtocolsHonorOrder Off

        Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
        Header always set X-Frame-Options DENY
        Header always set X-Content-Type-Options nosniff
        Header always set Expect-CT "max-age=0"
        
      </VirtualHost>

      SSLSessionCache shmcb:/etc/httpd/ssl_scache(512000)
      SSLSessionCacheTimeout  300

      SSLUseStapling On
      SSLStaplingCache "shmcb:logs/ssl_stapling(32768)"
      
  /etc/cron.d/certbot:
    mode: "000644"
    owner: root
    group: root
    content: |
      0 0 1 * * sudo /var/app/current/certbot-auto renew

commands:
  remove_old_cron:
    command: "rm -f /etc/cron.d/*.bak"

Resources:
  sslSecurityGroupIngress: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: 0.0.0.0/0

